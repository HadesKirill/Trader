@page "/actual"
@using System.Diagnostics;
@inject MyTraderBlazor.Controllers.DataController dataController
@inject Microsoft.JSInterop.IJSRuntime JSRuntime

<h3>Главное на сегодня</h3>

<div style="display: flex; flex-direction: row;">
    <div style="flex: 1;">
        <!-- Карточка с текстом -->
        @if (dataController.TextData == null)
        {
            <p>Loading data...</p>
        }
        else if (dataController.TextData.Count == 0)
        {
            <p>No data available.</p>
        }
        else
        {
            @foreach (var item in dataController.TextData)
            {
                <div style="border: 1px solid #ccc; padding: 10px; margin-bottom: 10px;">
                    @if (item.Images != null && item.Images.Any())
                    {
                        @foreach (var image in item.Images)
                        {
                            <img src="@($"data:image/png;base64,{ConvertByteArrayToString(image)}")" alt="Image" width="150" height="150" />
                        }
                    }
                    <strong>Text: @item.Text</strong><br />             
                </div>
            }
        }
    </div>

    <div style="display: flex; flex-direction: column; align-items: center;">
        <!-- Значок плюсика -->
        <div style="border: 1px solid #ccc; padding: 10px; cursor: pointer; margin-bottom: 10px;"
        @onclick="ShowInputForm">
            <span style="font-size: 24px; line-height: 24px;">+</span>
        </div>

        <!-- Форма для ввода текста и загрузки картинок -->
        @if (showInputForm)
        {
            <div style="border: 1px solid #ccc; padding: 10px;">
                <input type="text" @bind="@text" style="margin-bottom: 10px;" /><br />
                <InputFile id="fileInput" style="display:none;" OnChange="HandleFileChange" />
                <button @onclick="ChooseFile">Choose File</button>
                <InputFile id="fileInput" style="display:none;" OnChange="HandleFileChange" />
                <button @onclick="UploadData">Upload Data</button>
                @if (selectedImages != null && selectedImages.Any())
                {
                    @foreach (var image in selectedImages)
                    {
                        <img src="@($"data:image/png;base64,{Convert.ToBase64String(image)}")" alt="Image" width="150" height="150"/>
                    }
                }
            </div>
        }
    </div>
</div>

@code {
    private List<byte[]> selectedImages;
    private bool showInputForm;
    private string text;

    protected override async Task OnInitializedAsync()
    {
        await dataController.LoadData();

    }

    private async Task ChooseFile()
    {
        await JSRuntime.InvokeVoidAsync("eval", "document.getElementById('fileInput').click();");
    }

    public static string ConvertByteArrayToString(byte[] byteArray)
    {
        if (byteArray == null)
        {
            return null;
        }

        char[] charArray = new char[byteArray.Length];
        for (int i = 0; i < byteArray.Length; i++)
        {
            charArray[i] = (char)byteArray[i];
        }

        return new string(charArray);
    }

    private void Msg()
    {
        Debug.WriteLine("hey");
    }

    private async Task HandleFileChange(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            if (selectedImages == null)
                selectedImages = new List<byte[]>();

            using (var memoryStream = new MemoryStream())
            {
                await file.OpenReadStream(maxAllowedSize: 10485760).CopyToAsync(memoryStream);
                selectedImages.Add(memoryStream.ToArray());
            }

            StateHasChanged();
        }
    }

    private async Task UploadData()
    {
        await dataController.UploadData(text, selectedImages);
        selectedImages = null; 
        text = null; 
        showInputForm = false;
        await LoadData(); 
    }

    private async Task LoadData()
    {
        await dataController.LoadData();
    }

    private void ShowInputForm()
    {
        showInputForm = true;
    }
}